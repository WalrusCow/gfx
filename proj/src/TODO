================================================================================
=============================== Main Objectives ================================
================================================================================

- Torus primitive
- Reflection
- Refraction
- Soft shadows + area lights
- Glossy reflection
- Unique scene

================================================================================
============================= Completed Objectives =============================
================================================================================

Adaptive supersampling
======================

Could possibly build a "heatmap" style thing out of the depth to which pixels
are being antialiased.

Texture mapping
===============

Polygons defined on a plane not parallel to XY do not work properly.

Phong Interpolation
===================

If more time, for arbitary polygons:
(1)
  - Rotate so that the polygon is on the xy plane (and thus discard z coord)
  - Find intersections of polygon edges w/ horizontal line thru intersection pt
  - Using these edge points, interpolate (linearly) the normals between the edge
    ends.
  - Using those interpolated normals, interpolate once more to get an
    approximated normal at the intersection point (the intersection point will
    lie on the line between the two edge points).
  - Undo the two rotations (inverse transpose for the normal)
(2)
  - Construct a horizontal plane using the polygon normal and e.g. [1, 0, 0]
    * If the polygon is horizontal (normal is epsilon close to [0, 1, 0]) then
      we can treat this as a 2d problem by ignoring y. See (1).
  - Using this plane, find the polygon edge intersections with it
  - Using these edge points, interpolate (linearly) the normals between the edge
    ends.
  - Using those interpolated normals, interpolate once more to get an
    approximated normal at the intersection point (the intersection point will
    lie on the line between the two edge points).
(3)
  - Triangulate each polygon by picking a vertex and drawing an edge from it
    to every other vertex (that it isn't already adjacent to).
    * Or triangulate by calculating the barycentre of the vertices, make a new
      vertex there and draw edges to other vertices on the polygon.
  - Proceed as normal.

Grid Acceleration
=================

- Use different sizes for x, y, z.
- When constructing the grid, only check cells within the bounding box. Get the
  min and max coordinates in all of (x, y, z) then check all cells in between
  those.
- Split meshes into polygons.
- Perform actual sphere / cylinder / torus intersection with cube
